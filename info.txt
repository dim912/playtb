
#create using sbt seed
sbt new playframework/play-java-seed.g8

#main concepts
--------------

All Scala APIs => play.api
All Java APIS =>  play.mvc

Play - Concepts
----------------

Action -> java method process request parameters and produce the result

public Result index(String name) {
    return ok("Hello " + name);
}
The parameters to Action are resolved by the Router. filled with the values from URL.(URL path or query parametrs)


Controller -> controller groups several action methods -> extends play.mvc.Controller

Result
------
Defined in play.mvc.Result an play.mvc.Results

Sample Responses

        return ok("Got Request :" + request() + " !");
        Result ok = ok("Hello world!");
        Result notFound = notFound();
        Result pageNotFound = notFound("<h1>Page not found</h1>").as("text/html");
        Result badRequest = badRequest(views.html.form.render(formWithErrors));
        Result oops = internalServerError("Oops");
        Result anyStatus = status(488, "Strange response type");

Redirects
---------

Redirect browser to a new URL, is also a result

 return redirect("/user/home"); //this sends 303 SEE_OTHER response code

HTTP Routing
------------

=> converts each incomming HTTP request to an action(and call a public method in a controller class)
=> HTTP request is seen as an event by MVC framework (same as in Servlets)
=> Event contain two major info
        a. request path /client/1334
        b. Mehtod GET,POST

Dependency Injection
 ------------------

Plays default routes generator
    => create a router class that accepts controller instances in an @Inject annotated constructor

=> Regular expression matches are possible in route paths

=> router modifiers are possible in routes
Ex : to bypass CSRF filter
+ nocsrf
POST  /api/new              controllers.Api.newThing()

paramemtes with default, fixed values are possible

# Pagination links, like /clients?page=3
GET   /clients              controllers.Clients.list(page: Int ?= 1)

# The version parameter is optional. E.g. /api/list-all?version=3.0
GET   /api/list-all         controllers.Api.list(version ?= null)


Default Controller
------------------
# Redirects to https://www.playframework.com/ with 303 See Other
GET   /about      controllers.Default.redirect(to = "https://www.playframework.com/")

# Responds with 404 Not Found
GET   /orders     controllers.Default.notFound

# Responds with 500 Internal Server Error
GET   /clients    controllers.Default.error

# Responds with 501 Not Implemented
GET   /posts      controllers.Default.todo


Manupulating the Response
--------------------------

=> Auto Detected looking at the body passed to ok method.

JsonNode json = Json.toJson(object);
Result jsonResult = ok(json);
will set the Content-Type header to application/json.

Setting context type header manually
------------------------------------
Result htmlResult = ok("<h1>Hello World!</h1>").as("text/html");


Session and Flash scopes
------------------------

Session - available during whole session
Flash - available to the next request


Important - Unlike servlets => play maintain Session, flash data in cookies(4kb max)
*cookies are signed with a secret key(if client modify => gets invalid)


Play session => should not be used as a cache.

For cache => Play built-in cache can be used(session Id as cache key )

Session cookies
---------------

configured on application.conf

session Timeout
----------------
=> by default => no timeout
if needed
set => play.http.session.maxAge in application.conf
this will set play.http.session.jwt.expiresAfter to the same value auto.

Flash Scope
-----------
=> kept only for one request
=> not signed => meaning client can modify them

=> could subject to race conditions.

=> should only be used to trasposrt success/error messages.


Ex : After saving an item, routing to home page and how a "success" message on page

Ex:
public Result save() {
    flash("success", "The item has been created");
    return redirect("/home");
}

public Result index() {
    String message = flash("success");
    if(message == null) {
        message = "Welcome!";
    }
    return ok(message);
}


Body Parser
------------

Since the header is smalled => it is get prased to a
But body is bigger => it is not buffered to memory => and modled as a stream
=> if needs to body to get parsed into an Object => use BodyParser

Since Play is Asynchronouse => traditional blocking input streams are not suitable
=> so play use "Akka Streams"

=> If no body praser is selected
    => play prasers accordingly looking at Content-Type header

application/json => is prased as a JsonNode
application/x-www-form-urlencoded => as Map<Strin,String[]>

body can be assed through body() method on Request
wrapped in RequestBody object

public Result index() {
    JsonNode json = request().body().asJson();
    return ok("Got name: " + json.get("name").asText());
}

Action Composition
------------------

In play action => is a function which return a play.mvc.Result value

Action provided by Java API is => a instance of p

Play has a default play.mvc.Action object which delegate requests to action methods.

If we need to customize the behaviour(Example: Log every request), we can create our own custom Action class

To Register a method with a custom Action : use =>  @With(VerboseAction.class)

* every request must be served by a distincet instance of play.mvc.Action( must not be singalton)


Asynchronouse Results
---------------------

Internally play ins asynchronouse bottom-up.
every request is handled non blocking way

So => Application code shoudl avoid blocking thread in controllers

=> So, If the result is not ready => Return a future => CompletionStage<Result>

=> To create a CompletionState -> another promise is needed first, which will give the actual result needed to calculate result

CompletionStage<Double> promiseOfPIValue = computePIAsynchronously();
// Runs in same thread
CompletionStage<Result> promiseOfResult = promiseOfPIValue.thenApply(pi ->
                ok("PI value computed: " + pi)
);

Play asynchronuse API methods => give CompletionStage.
    Ex : play.libs.WS
    play.libs.Akka

CompletionStage.thenApply => executes the completionstage in same calling thread => for non CUP bound logics

For Async => CompletionStage.supplyAsync()

// import static java.util.concurrent.CompletableFuture.supplyAsync;
// creates new task
CompletionStage<Integer> promiseOfInt = CompletableFuture.supplyAsync(() ->
        intensiveComputation());

=> in SupplyAsync => task will be places in fork join pool ( may be called from a different thread) => use the default executor

*  Only the “*Async” methods from CompletionStage provide asynchronous execution.*


Using HTTP ExecutionContext
---------------------------

=> must supply HTTP executon context explicitly as an executor => when using CompletionStatge inside an Action.
(to eunsure, HTTP.COntext remain in scope)
Else => “There is no HTTP Context available from here” error comes when call request() or any other depends on Http.Context

Using CustomExecutionContext and HttpExecution
-----------------------------------------------

Because HttpExecutionContext is still a default play ExecutionContext.
If to call a blocking API(Ex: JDBC) => then executoonStage run on a different executor to move it from plays rendering thread pool.

How to do : => subclass  play.libs.concurrent.CustomExecutionContext reference to custom dispatcher(akka)

public class JDBCExecutionContext extends CustomExecutionContext {
    @Inject
    public JDBCExecutionContext(ActorSystem actorSystem, String name) {
        //use a custom thead pool defined in application.conf
        //(done through akka dispatcher configuration)
        super(actorSystem, "app.jdbcThreadPool");
    }
}

=> once custom Dispatcher is there => wrap it with HttpException.fromThread:

public class Application extends Controller {

    private MyExecutionContext myExecutionContext;

    @Inject
    public Application(MyExecutionContext myExecutionContext) {
        this.myExecutionContext = myExecutionContext;
    }

    public CompletionStage<Result> index() {
        // Wrap an existing thread pool, using the context from the current thread
        Executor myEc = HttpExecution.fromThread((Executor) myExecutionContext);
        return supplyAsync(() -> intensiveComputation(), myEc)
                .thenApplyAsync(i -> ok("Got result: " + i), myEc);
    }

    public int intensiveComputation() { return 2;}
}

Note => CompletionStage can not convert blocking to non blocking
=> it is only a wrapper
=> so a separte execution context should be given to execute blocking operations.


=> Play Actions are asynchronuse by default
=> controller code below Returned ins internally enclosed in a promise
=> though Action return Result or CompletionStage<Result> => both objects are handled internally the same way.(not two ways like asyc, and sync. its only async)
public Result index() {
    return ok("Got request " + request() + "!");
}

Handling Time-outs
------------------

=> to avoid web brower block

=> can use "play.libs.concurrent.Futures.timeout" to wrap CompletionStage in non-blocking timeouts

=> timeOut is not same as cancellation => even in timeout the future get complets => even the vlaue is  not returned



















































